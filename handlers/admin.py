from aiogram import Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from keyboards.admin_kb import (
    get_admin_keyboard,
    get_user_management_keyboard,
    get_menu_management_keyboard
)
from database.crud import (
    get_user_by_id,
    update_user_role,
    search_users,
    get_orders_stats,
    get_menu_categories,
    update_menu_item
)
from database.models import UserRole
from config.config import Config
import logging
from typing import Optional

logger = logging.getLogger(__name__)


class AdminStates:
    USER_SEARCH = "admin_user_search"
    ROLE_EDIT = "admin_role_edit"
    MENU_ITEM_EDIT = "menu_item_edit"


async def admin_start(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    try:
        await message.answer(
            "üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in admin_start: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")


async def handle_admin_stats(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        stats = get_orders_stats(message.bot.get('db'))
        response = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {stats.get('active_orders', 0)}\n"
            f"‚Ä¢ –í—ã—Ä—É—á–∫–∞: {stats.get('total_revenue', 0)} —Ä—É–±.\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.get('weekly_orders', 0)}"
        )
        await message.answer(response)
    except Exception as e:
        logger.error(f"Error in handle_admin_stats: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


async def handle_user_management(message: Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏"""
    try:
        builder = InlineKeyboardBuilder()
        builder.button(text="–ü–æ ID", callback_data="search_by_id")
        builder.button(text="–ü–æ –∏–º–µ–Ω–∏", callback_data="search_by_name")
        builder.button(text="–í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã", callback_data="list_managers")
        builder.adjust(2)

        await message.answer(
            "üë• –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"Error in handle_user_management: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")


async def handle_menu_management(message: Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é"""
    try:
        categories = get_menu_categories(message.bot.get('db'))
        builder = InlineKeyboardBuilder()

        for category in categories:
            builder.button(
                text=category.name,
                callback_data=f"category_{category.id}"
            )

        builder.adjust(2)
        await message.answer(
            "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:",
            reply_markup=get_menu_management_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in handle_menu_management: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é")


async def process_role_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = callback.data.split('_')
        user_id = int(data[1])
        role = UserRole(data[2])

        if update_user_role(callback.bot.get('db'), user_id, role):
            await callback.message.edit_text(f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {role.value}")
        else:
            await callback.message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å")

    except Exception as e:
        logger.error(f"Error in process_role_selection: {e}", exc_info=True)
        await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏")


def register_admin_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤"""
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        dp.message.register(admin_start, Command("admin"))

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        dp.message.register(handle_admin_stats, F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        dp.message.register(handle_user_management, F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        dp.message.register(handle_menu_management, F.text == "üìù –ú–µ–Ω—é")
        dp.message.register(handle_back_to_admin, F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")

        # Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dp.callback_query.register(process_role_selection, F.data.startswith("setrole_"))

        logger.info("Admin handlers registered successfully")
    except Exception as e:
        logger.error(f"Failed to register admin handlers: {e}", exc_info=True)
        raise