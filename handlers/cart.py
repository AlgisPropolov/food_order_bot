from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Dispatcher
from typing import Optional, Dict, List
from database.cart_repository import CartRepository
from services.iiko_service import IikoService
from keyboards import (
    main_keyboard,
    cart_keyboard,
    confirmation_keyboard
)
import logging

logger = logging.getLogger(__name__)
router = Router()


class CartStates(StatesGroup):
    viewing_cart = State()
    checkout = State()


async def show_cart(
        message: types.Message,
        cart_repo: CartRepository,
        state: FSMContext
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = message.from_user.id
        cart = await cart_repo.get_cart(user_id)

        if not cart or not cart.items:
            await message.answer(
                "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
                reply_markup=main_keyboard()
            )
            return

        total = sum(item['price'] * item['quantity'] for item in cart.items)

        cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n" + "\n".join(
            f"{i + 1}. {item['name']} - {item['quantity']} x {item['price']}‚ÇΩ"
            for i, item in enumerate(cart.items)
        ) + f"\n\nüí≥ –ò—Ç–æ–≥–æ: {total}‚ÇΩ"

        await state.set_state(CartStates.viewing_cart)
        await message.answer(
            cart_text,
            reply_markup=cart_keyboard()
        )

    except Exception as e:
        logger.error(f"Cart error: {e}", exc_info=True)
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã",
            reply_markup=main_keyboard()
        )


async def add_to_cart(
        message: types.Message,
        cart_repo: CartRepository,
        state: FSMContext,
        product_id: str
):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    try:
        user_id = message.from_user.id
        data = await state.get_data()

        product = next(
            (p for p in data['menu']['products'] if p['id'] == product_id),
            None
        )

        if not product:
            await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        await cart_repo.add_item(
            user_id=user_id,
            product_id=product_id,
            name=product['name'],
            price=product['price'],
            quantity=1
        )

        await message.answer(
            f"‚úÖ {product['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É",
            reply_markup=main_keyboard()
        )

    except Exception as e:
        logger.error(f"Add to cart error: {e}", exc_info=True)
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É",
            reply_markup=main_keyboard()
        )


async def remove_from_cart(
        callback: types.CallbackQuery,
        cart_repo: CartRepository
):
    """–£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        item_id = callback.data.split('_')[1]
        await cart_repo.remove_item(callback.from_user.id, item_id)

        await callback.message.edit_text(
            "‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã",
            reply_markup=main_keyboard()
        )

    except Exception as e:
        logger.error(f"Remove from cart error: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")


async def checkout_cart(
        message: types.Message,
        cart_repo: CartRepository,
        iiko_service: IikoService,
        state: FSMContext
):
    """–û—Ñ–æ—Ä–º–ª—è–µ—Ç –∑–∞–∫–∞–∑ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        user_id = message.from_user.id
        cart = await cart_repo.get_cart(user_id)

        if not cart or not cart.items:
            await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return

        total = sum(item['price'] * item['quantity'] for item in cart.items)

        await state.set_state(CartStates.checkout)
        await message.answer(
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É {total}‚ÇΩ:\n\n" +
            "\n".join(f"- {item['name']} x{item['quantity']}" for item in cart.items),
            reply_markup=confirmation_keyboard()
        )

    except Exception as e:
        logger.error(f"Checkout error: {e}", exc_info=True)
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞",
            reply_markup=main_keyboard()
        )


async def confirm_order(
        callback: types.CallbackQuery,
        cart_repo: CartRepository,
        iiko_service: IikoService,
        state: FSMContext
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –≤ iiko"""
    try:
        user_id = callback.from_user.id
        cart = await cart_repo.get_cart(user_id)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ iiko
        order_id = await iiko_service.create_order(
            user_id=user_id,
            items=cart.items
        )

        # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
        await cart_repo.clear_cart(user_id)
        await state.clear()

        await callback.message.edit_text(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
            f"–°—Ç–∞—Ç—É—Å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ /orders",
            reply_markup=main_keyboard()
        )

    except Exception as e:
        logger.error(f"Order confirmation error: {e}", exc_info=True)
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞",
            reply_markup=main_keyboard()
        )


def register_cart_handlers(dp: Dispatcher, cart_repo: CartRepository, iiko_service: IikoService):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã"""
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã
    dp.message.register(
        lambda message: show_cart(message, cart_repo, dp.fsm),
        Command("cart") | F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞"
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
    dp.message.register(
        lambda message: add_to_cart(message, cart_repo, dp.fsm, message.text.split('_')[1]),
        Command(startswith="add_")
    )

    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    dp.callback_query.register(
        lambda callback: remove_from_cart(callback, cart_repo),
        F.data.startswith("remove_")
    )

    # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    dp.message.register(
        lambda message: checkout_cart(message, cart_repo, iiko_service, dp.fsm),
        F.text == "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    dp.callback_query.register(
        lambda callback: confirm_order(callback, cart_repo, iiko_service, dp.fsm),
        F.data == "confirm_order"
    )