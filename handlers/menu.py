from aiogram import Router, types, Bot, F
from aiogram.filters import Command, Text
from aiogram.fsm.context import FSMContext
from typing import Optional
from keyboards import (
    main_keyboard,
    menu_categories_keyboard,
    menu_products_keyboard
)
from services.iiko_service import IikoService
import logging

router = Router()


async def show_menu(
        message: types.Message,
        iiko_service: IikoService,
        state: FSMContext
):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—é –∏–∑ iiko
        menu = await iiko_service.get_menu()

        if not menu or not menu.categories:
            await message.answer(
                "üçΩ –ú–µ–Ω—é –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=main_keyboard()
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–Ω—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(menu=menu.dict())

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        await message.answer(
            "üçΩ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=menu_categories_keyboard(menu.categories)
        )

    except Exception as e:
        logging.error(f"Menu error: {e}", exc_info=True)
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é",
            reply_markup=main_keyboard()
        )


async def handle_category_selection(
        callback: types.CallbackQuery,
        iiko_service: IikoService,
        state: FSMContext,
        bot: Optional[Bot] = None
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã
    """
    try:
        category_id = callback.data.split('_')[1]
        data = await state.get_data()
        menu = data.get('menu')

        if not menu:
            await callback.answer("–ú–µ–Ω—é —É—Å—Ç–∞—Ä–µ–ª–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞—é –Ω–æ–≤–æ–µ...")
            menu = await iiko_service.get_menu()
            await state.update_data(menu=menu.dict())

        # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = next(
            (c for c in menu['categories'] if c['id'] == category_id),
            None
        )

        if not category:
            await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        products = [
            p for p in menu['products']
            if p['parentGroup'] == category_id
        ]

        if not products:
            await callback.message.edit_text(
                f"üçΩ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category['name']}' –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π",
                reply_markup=menu_categories_keyboard(menu['categories'])
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        await callback.message.edit_text(
            f"üçΩ {category['name']}:\n\n" +
            "\n".join(f"‚Ä¢ {p['name']} - {p['price']}‚ÇΩ" for p in products[:10]),
            reply_markup=menu_products_keyboard(products, category_id)
        )

    except Exception as e:
        logging.error(f"Category error: {e}", exc_info=True)
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            reply_markup=main_keyboard()
        )


async def handle_product_selection(
        callback: types.CallbackQuery,
        state: FSMContext
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
    """
    try:
        product_id = callback.data.split('_')[1]
        data = await state.get_data()

        product = next(
            (p for p in data['menu']['products'] if p['id'] == product_id),
            None
        )

        if product:
            await callback.message.answer(
                f"üçï {product['name']}\n\n"
                f"–¶–µ–Ω–∞: {product['price']}‚ÇΩ\n"
                f"–°–æ—Å—Ç–∞–≤: {product.get('description', '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n\n"
                "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É /add_{product_id}"
            )
        else:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except Exception as e:
        logging.error(f"Product error: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞")


def register_menu_handlers(dp: Dispatcher, iiko_service: IikoService):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é
    """
    # –¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /menu –∏ –∫–Ω–æ–ø–∫–∞ "–ú–µ–Ω—é"
    dp.message.register(
        lambda message: show_menu(message, iiko_service, dp.fsm),
        Command("menu") | Text(text="üçΩ –ú–µ–Ω—é")
    )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    dp.callback_query.register(
        lambda callback: handle_category_selection(callback, iiko_service, dp.fsm, dp.bot),
        F.data.startswith("category_")
    )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
    dp.callback_query.register(
        handle_product_selection,
        F.data.startswith("product_")
    )