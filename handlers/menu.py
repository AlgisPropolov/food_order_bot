from aiogram import Bot, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from iiko_integration.iiko_api import IikoAPI
from keyboards.inline import menu_categories_keyboard
import logging


async def show_menu(message: Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é –∏–∑ iiko
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    try:
        iiko = IikoAPI()
        menu = await iiko.get_menu()

        if not menu:
            await message.answer("‚ö†Ô∏è –ú–µ–Ω—é –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        categories = menu.get("groups", [])
        if not categories:
            await message.answer("üçΩ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –ø—É—Å—Ç—ã.")
            return

        await message.answer(
            "üçΩ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=menu_categories_keyboard(categories)
        )

    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é.")
        logging.error(f"Error in show_menu: {e}", exc_info=True)


async def handle_category(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    try:
        category_id = callback.data.split("_")[1]
        iiko = IikoAPI()
        menu = await iiko.get_menu()

        if not menu:
            await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é.")
            return

        products = [
            item for item in menu["products"]
            if item["parentGroup"] == category_id
        ]

        if not products:
            await callback.message.edit_text("üçΩ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π.")
            return

        response = "üçú –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:\n" + "\n".join(
            f"{p['name']} - {p['price']} —Ä—É–±."
            for p in sorted(products, key=lambda x: x['name'])
        )

        await callback.message.edit_text(response)

    except Exception as e:
        await callback.message.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error(f"Error in handle_category: {e}", exc_info=True)


def register_menu_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é
    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞
    """
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    dp.message.register(
        show_menu,
        Command("menu") | F.text == "üçú –ú–µ–Ω—é"  # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    dp.callback_query.register(
        handle_category,
        F.data.startswith("category_")
    )